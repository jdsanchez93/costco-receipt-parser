AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  costco-receipt-parser

  Sample SAM Template for costco-receipt-parser

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Parameters: 
  BucketName: 
    Description: Name of s3 bucket
    Type: String
  Auth0Domain:
    Description: Auth0 domain (e.g., your-domain.auth0.com)
    Type: String
    Default: ""
  Auth0Audience:
    Description: Auth0 audience/identifier for your API
    Type: String
    Default: ""
  AllowedOrigins:
    Description: Comma-separated list of allowed origins for CORS (e.g., http://localhost:3000,https://your-app.com)
    Type: CommaDelimitedList
    Default: "http://localhost:3000,https://localhost:3000"

Resources:
  ReceiptApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub "${AWS::StackName}-ReceiptApi"
      Description: Receipt processing API with Auth0 JWT authentication
      ProtocolType: HTTP
      CorsConfiguration:
        AllowOrigins: !Ref AllowedOrigins
        AllowHeaders:
          - "Content-Type"
          - "X-Amz-Date"
          - "Authorization"
          - "X-Api-Key"
          - "X-Amz-Security-Token"
        AllowMethods:
          - "GET"
          - "POST"
          - "OPTIONS"

  Auth0JwtAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      Name: Auth0JwtAuthorizer
      AuthorizerType: JWT
      ApiId: !Ref ReceiptApi
      IdentitySource:
        - "$request.header.Authorization"
      JwtConfiguration:
        Issuer: !Sub "https://${Auth0Domain}/"
        Audience:
          - !Ref Auth0Audience

  UploadUrlIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ReceiptApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UploadUrlFunction.Arn}/invocations"
      IntegrationMethod: POST
      PayloadFormatVersion: "2.0"

  UploadUrlRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ReceiptApi
      RouteKey: "POST /upload-url"
      AuthorizationType: JWT
      AuthorizerId: !Ref Auth0JwtAuthorizer
      Target: !Sub "integrations/${UploadUrlIntegration}"

  DownloadUrlIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ReceiptApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DownloadUrlFunction.Arn}/invocations"
      IntegrationMethod: POST
      PayloadFormatVersion: "2.0"

  DownloadUrlRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ReceiptApi
      RouteKey: "GET /download-url/{receipt_id}"
      AuthorizationType: JWT
      AuthorizerId: !Ref Auth0JwtAuthorizer
      Target: !Sub "integrations/${DownloadUrlIntegration}"

  ReceiptApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref ReceiptApi
      StageName: Prod
      AutoDeploy: true

  UploadUrlLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref UploadUrlFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ReceiptApi}/*/*"

  DownloadUrlLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DownloadUrlFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ReceiptApi}/*/*"

  HelloWorldFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: hello_world/
      Handler: app.lambda_handler
      Runtime: python3.13
      Architectures:
        - x86_64
      Environment:
        Variables:
          TABLE_NAME: !Ref MainTable
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "s3:GetObject"
              Resource: !Sub "arn:aws:s3:::${BucketName}/*"
            - Effect: "Allow"
              Action:
                - "textract:DetectDocumentText"
              Resource: "*"
            - Effect: "Allow"
              Action:
                - "dynamodb:PutItem"
                - "dynamodb:GetItem"
                - "dynamodb:UpdateItem"
                - "dynamodb:DeleteItem"
                - "dynamodb:Query"
                - "dynamodb:BatchWriteItem"
                - "dynamodb:BatchGetItem"
              Resource: 
                - !GetAtt MainTable.Arn
                - !Sub "${MainTable.Arn}/index/GSI1"
                - !Sub "${MainTable.Arn}/index/GSI2"

  UploadUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: hello_world/
      Handler: upload_url.lambda_handler
      Runtime: python3.13
      Architectures:
        - x86_64
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketName
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "s3:PutObject"
                - "s3:PutObjectAcl"
              Resource: !Sub "arn:aws:s3:::${BucketName}/uploads/*"

  DownloadUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: hello_world/
      Handler: download_url.lambda_handler
      Runtime: python3.13
      Architectures:
        - x86_64
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketName
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "s3:GetObject"
                - "s3:HeadObject"
              Resource: !Sub "arn:aws:s3:::${BucketName}/uploads/*"

  ReceiptImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedOrigins: !Ref AllowedOrigins
            ExposedHeaders:
              - "ETag"
              - "x-amz-meta-custom-header"
            MaxAge: 3000
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Function: !GetAtt HelloWorldFunction.Arn
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  S3EventNotificationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref HelloWorldFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !GetAtt ReceiptImageBucket.Arn

  MainTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-main"
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
        - AttributeName: GSI2PK
          AttributeType: S
        - AttributeName: GSI2SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        - IndexName: GSI2
          KeySchema:
            - AttributeName: GSI2PK
              KeyType: HASH
            - AttributeName: GSI2SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TimeToLiveSpecification:
        AttributeName: expires_at
        Enabled: true

Outputs:
  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
  ReceiptApiUrl:
    Description: "API Gateway base URL for receipt processing"
    Value: !Sub "https://${ReceiptApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
  UploadUrlEndpoint:
    Description: "API Gateway endpoint URL for upload URL generation"
    Value: !Sub "https://${ReceiptApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/upload-url"
  DownloadUrlEndpoint:
    Description: "API Gateway endpoint URL for download URL generation"
    Value: !Sub "https://${ReceiptApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/download-url/{receipt_id}"
  UploadUrlFunction:
    Description: "Upload URL Lambda Function ARN"
    Value: !GetAtt UploadUrlFunction.Arn
  DownloadUrlFunction:
    Description: "Download URL Lambda Function ARN"
    Value: !GetAtt DownloadUrlFunction.Arn
